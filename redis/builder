#!/bin/bash
#
# 作者：Skygangsta<skygangsta@hotmail.com>
#
# Nginx 编译脚本，仅支持 Debian 系 Linux 系统

WORK_HOME=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
BASE_NAME=$(basename $BASH_SOURCE)

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

REDIS_VERSION=5.0.5
REDIS_VERSION_MAJOR=`printf $REDIS_VERSION | awk -F '.' '{print $1}'`
REDIS_VERSION_MINOR=`printf $REDIS_VERSION | awk -F '.' '{print $2}'`
BUILD_PREFIX=/usr
INSTALL_PREFIX=${WORK_HOME}/dist/redis-${REDIS_VERSION}
IMAGE_NAME=alpine:edge

# 探测cpu核心数
if [ -f /proc/cpuinfo ]; then
    j="-j$(grep 'model name' /proc/cpuinfo | wc -l || 1)"
fi

check_source_file() {
    
    # # 检查并安装 wget
    # if ! which wget 2>1 > /dev/null; then
    #     apk add wget ca-certificates
    # fi

    if [ ! -d "${WORK_HOME}/src" ]; then
        mkdir -p "${WORK_HOME}/src"
    fi

    if [ ! -s "${WORK_HOME}/src/redis-${REDIS_VERSION}.tar.gz" ]; then

        wget -c http://download.redis.io/releases/redis-${REDIS_VERSION}.tar.gz \
            -O ${WORK_HOME}/src/redis-${REDIS_VERSION}.tar.gz
        if [ $? -ne 0 ]; then
            rm -rf ${WORK_HOME}/src/redis-${REDIS_VERSION}.tar.gz
            exit $?
        fi
    fi

    

}

check_build_tools() {
    # 安装编译工具
    apk add gcc g++ make autoconf patch
}

check_install_deps() {
    # 安装依赖
    apk add linux-headers
}

func_build_redis() {
    check_source_file
    check_build_tools
    check_install_deps

    echo "Start building redis..."

    if [ -d ${INSTALL_PREFIX} ]; then
        rm -rf ${INSTALL_PREFIX}
    fi

    tar xf ${WORK_HOME}/src/redis-${REDIS_VERSION}.tar.gz -C ${WORK_HOME}/src && \
        cd ${WORK_HOME}/src/redis-${REDIS_VERSION}

    make PREFIX=${INSTALL_PREFIX} install || bash -c "${WORK_HOME}/${BASE_NAME} clean && exit 1"
    mkdir -p ${WORK_HOME}/dist/redis-${REDIS_VERSION}/conf
    cp *.conf ${WORK_HOME}/dist/redis-${REDIS_VERSION}/conf

    echo "Finished."
}

clean() {
    echo "Start cleaning redis..."

    if [ -d "${WORK_HOME}/src/redis-${REDIS_VERSION}" ]; then
        rm -rf "${WORK_HOME}/src/redis-${REDIS_VERSION}"
    fi

    echo "Finished."
}

docker_env() {
    echo "Start initializing docker env..."

    docker ps -a | grep build_redis_on_${IMAGE_NAME/:/_} > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        # 容器未创建
        # 创建容器
        docker run --name build_redis_on_${IMAGE_NAME/:/_} \
            --volume=${WORK_HOME}:/data \
            --cpu-shares=1024 --memory=512m --memory-swap=-1 \
            --oom-kill-disable \
            -t -i -d ${IMAGE_NAME} || exit 1
    else
        docker ps | grep build_redis_on_${IMAGE_NAME/:/_} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            docker start build_redis_on_${IMAGE_NAME/:/_} || exit 1
        fi
    fi

    docker exec -it build_redis_on_${IMAGE_NAME/:/_} apk add bash
    docker exec -it build_redis_on_${IMAGE_NAME/:/_} /data/builder sources ${IMAGE_NAME}
    docker exec -it build_redis_on_${IMAGE_NAME/:/_} apk upgrade

    echo "Finished."
}

add_apk_source() {
    if [ ! -f .add_apk_source ]; then
        echo http://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories
        echo "apk" > .add_apk_source
    fi
}

function func_help() {
    echo "
Usage:
    ${BASE_NAME} [Command]

Commands:
    image       - Build a docker image
    build       - Compile source code
    help        - Show this information
"
}

function func_build_docker_images() {
   echo "Start building docker image..."
    # 修改 Dockerfile 中的 nginx 版本
    sed -i "s|FROM alpine:.*|FROM ${IMAGE_NAME}|g" ${WORK_HOME}/Dockerfile
    sed -i "s|COPY startup.sh dist/redis-.*|COPY startup.sh dist/redis-${REDIS_VERSION}/ ./|g" ${WORK_HOME}/Dockerfile
    # 创建 nginx 镜像
    docker build -t skygangsta/redis:$REDIS_VERSION-alpine $WORK_HOME
    
    echo "Finished."
}

function func_chown() {
    chown -R $1:$2 ${WORK_HOME}
}

case "$1" in
    image)
        # 创建 redis docker 构建容器
        docker_env

        if [ "${2:-default}" != "nb" ]; then
            docker exec -it build_redis_on_${IMAGE_NAME/:/_} /data/builder build || exit 1
        fi

        docker exec -it build_redis_on_${IMAGE_NAME/:/_} /data/builder clean || exit 1
        docker exec -it build_redis_on_${IMAGE_NAME/:/_} /data/builder chown $(id -u) $(id -g) || exit 1
        
        func_build_docker_images

        exit 0
    ;;
    build)
        func_build_redis

        exit 0
    ;;
    sources)
        add_apk_source $@

        exit 0
    ;;
    clean)
        clean
    ;;
    chown)
        func_chown $2 $3
    ;;
    help)
        func_help
    ;;
    *)
        func_help
        exit 1
    ;;
esac
