#!/bin/bash
#
# 作者：Skygangsta<skygangsta@hotmail.com>
#
# Nginx 编译脚本，仅支持 Debian 系 Linux 系统

WORK_HOME=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
BASE_NAME=$(basename $BASH_SOURCE)

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

NGINX_VERSION=1.16.1
NGINX_VERSION_MAJOR=`printf $NGINX_VERSION | awk -F '.' '{print $1}'`
NGINX_VERSION_MINOR=`printf $NGINX_VERSION | awk -F '.' '{print $2}'`
BUILD_PREFIX=/usr
NGINX_INSTALL_PATH=${WORK_HOME}/dist/nginx-${NGINX_VERSION}
STICKY_VERSION=1.2.6
# YES or NO
ENABLE_MODSEC=NO
MODSEC_VERSION=3.0.3
MODSEC_INSTALL_PATH=${WORK_HOME}/dist/modsecurity
OWASP_MODSEC_CRS_VERSION=3.2.0
IMAGE_NAME=alpine:edge

# 探测cpu核心数
if [ -f /proc/cpuinfo ]; then
    j="-j$(grep 'model name' /proc/cpuinfo | wc -l || 1)"
fi

check_source_file() {
    
    # 检查并安装 git
    if ! which git 2>1 > /dev/null; then
        apk add git
    fi

    if [ ! -d "${WORK_HOME}/src" ]; then
        mkdir -p "${WORK_HOME}/src"
    fi

    if [ ! -s "${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz" ]; then

        wget http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \
            -O ${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz.tmp
        if [ $? -eq 0 ]; then
            mv ${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz.tmp ${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz
        else
            rm -rf ${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz.tmp
            exit $?
        fi
    fi

    if [ ${ENABLE_MODSEC:-NO} = YES ]; then

        if [ ! -d "${WORK_HOME}/src/ModSecurity" ]; then

            git clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity \
                ${WORK_HOME}/src/ModSecurity
        else
            cd ${WORK_HOME}/src/ModSecurity
            git pull
        fi

        
        if [ ! -d "${WORK_HOME}/src/ModSecurity-nginx" ]; then

            git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git \
                ${WORK_HOME}/src/ModSecurity-nginx
        else
            cd ${WORK_HOME}/src/ModSecurity
            git pull
        fi
  
        if [ ! -s "${WORK_HOME}/src/owasp-modsecurity-crs-${OWASP_MODSEC_CRS_VERSION}.tar.gz" ]; then

            wget https://github.com/SpiderLabs/owasp-modsecurity-crs/archive/v${OWASP_MODSEC_CRS_VERSION}.tar.gz \
                -O ${WORK_HOME}/src/owasp-modsecurity-crs-${OWASP_MODSEC_CRS_VERSION}.tar.gz.tmp
            if [ $? -eq 0 ]; then
                mv ${WORK_HOME}/src/owasp-modsecurity-crs-${OWASP_MODSEC_CRS_VERSION}.tar.gz.tmp ${WORK_HOME}/src/owasp-modsecurity-crs-${OWASP_MODSEC_CRS_VERSION}.tar.gz
            else
                rm -rf ${WORK_HOME}/src/owasp-modsecurity-crs-${OWASP_MODSEC_CRS_VERSION}.tar.gz.tmp
                exit $?
            fi
        fi
    fi

    if [ ! -s "${WORK_HOME}/src/nginx-upstream-fair-master.tar.gz" ]; then
    
        wget https://github.com/gnosek/nginx-upstream-fair/archive/master.tar.gz \
            -O ${WORK_HOME}/src/nginx-upstream-fair-master.tar.gz.tmp

        if [ $? -eq 0 ]; then
            mv $${WORK_HOME}/src/nginx-upstream-fair-master.tar.gz.tmp ${WORK_HOME}/src/nginx-upstream-fair-master.tar.gz
        else
            rm -rf ${WORK_HOME}/src/nginx-upstream-fair-master.tar.gz.tmp
            exit $?
        fi
    fi
    
    if [ ! -d "${WORK_HOME}/src/nginx-sticky-module-ng-${STICKY_VERSION}" ]; then

        git clone https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/src/${STICKY_VERSION}/ \
            ${WORK_HOME}/src/nginx-sticky-module-ng-${STICKY_VERSION}
    fi

}

check_build_tools() {
    # 安装编译工具
    apk add gcc g++ make automake autoconf patch libtool
}

check_install_deps() {
    # 安装依赖
    apk add pcre-dev zlib-dev openssl-dev linux-headers
    
    if [ ${ENABLE_MODSEC:-NO} = YES ]; then
        apk add libxml2-dev curl-dev geoip-dev
    fi
}

func_build_modsecurity() {
    if [ -d ${MODSEC_INSTALL_PATH} ]; then
        rm -rf ${MODSEC_INSTALL_PATH}
    fi

    apk add git

    cd ${WORK_HOME}/src/ModSecurity

    git submodule init
    git submodule update

    if [ ! -x ./build.sh ]; then
        chmod 755 ./build.sh
    fi

    if [ ! -x ./configure ]; then
        chmod 755 ./configure
    fi

    ./build.sh
    ./configure --prefix=${MODSEC_INSTALL_PATH}

    make $j
    make install
    make clean
}

func_configure() {
    if [ -f "${WORK_HOME}/src/nginx-${NGINX_VERSION}/Makefile" ]; then
        func_clean
    fi

    check_source_file
    check_build_tools
    check_install_deps

    if [ ${ENABLE_MODSEC:-NO} = YES ]; then
        # 编译 ModSecurity
        func_build_modsecurity

        DYNAMIC_MODULE_ADDON="--add-dynamic-module=${WORK_HOME}/src/ModSecurity-nginx"

        if [ ! -f /usr/lib/pkgconfig/modsecurity.pc ]; then
            cp -af ${MODSEC_INSTALL_PATH}/* /usr
            sed -i "s|^prefix=.*$|prefix=/usr|g" /usr/lib/pkgconfig/modsecurity.pc
        fi

        if [ -d "${WORK_HOME}/dist/owasp-modsecurity-crs" ]; then
            rm -rf ${WORK_HOME}/dist/owasp-modsecurity-crs
        fi

        tar xf ${WORK_HOME}/src/owasp-modsecurity-crs-${OWASP_MODSEC_CRS_VERSION}.tar.gz -C ${WORK_HOME}/dist
        mv ${WORK_HOME}/dist/owasp-modsecurity-crs-${OWASP_MODSEC_CRS_VERSION} ${WORK_HOME}/dist/owasp-modsecurity-crs
    fi

    echo "Start configuring nginx..."

    tar xf ${WORK_HOME}/src/nginx-upstream-fair-master.tar.gz -C ${WORK_HOME}/src

    sed -i 's/default_port/no_port/g' ${WORK_HOME}/src/nginx-upstream-fair-master/ngx_http_upstream_fair_module.c

    tar xf ${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz -C ${WORK_HOME}/src && \
        cd ${WORK_HOME}/src/nginx-${NGINX_VERSION}

    ./configure --prefix=$BUILD_PREFIX \
    --sbin-path=$BUILD_PREFIX/sbin/nginx \
    --conf-path=/etc/nginx/nginx.conf \
    --error-log-path=/var/log/nginx/error.log \
    --http-log-path=/var/log/nginx/access.log \
    --pid-path=/var/run/nginx.pid \
    --lock-path=/var/lock/nginx.lock \
    --http-client-body-temp-path=/var/cache/nginx/client_temp \
    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
    --user=www --group=www \
    --with-http_ssl_module \
    --with-http_realip_module \
    --with-http_addition_module \
    --with-http_sub_module \
    --with-http_dav_module \
    --with-http_flv_module \
    --with-http_mp4_module \
    --with-http_gzip_static_module \
    --with-http_random_index_module \
    --with-http_secure_link_module \
    --with-http_stub_status_module \
    --with-http_v2_module \
    --with-stream \
    --with-mail \
    --with-mail_ssl_module \
    --with-file-aio \
    --with-cpp_test_module \
    --with-debug \
    --with-threads \
    --with-compat \
    --with-cc-opt='-O2 -g -m64 -mtune=generic' \
    --add-module=${WORK_HOME}/src/nginx-sticky-module-ng-${STICKY_VERSION} ${DYNAMIC_MODULE_ADDON} || bash -c "${WORK_HOME}/${BASE_NAME} clean && exit 1"

    echo "Finished."
}

func_build() {
    if [ ! -f "${WORK_HOME}/src/nginx-${NGINX_VERSION}/Makefile" ]; then
        func_configure
    fi

    echo "Start building nginx..."

    cd ${WORK_HOME}/src/nginx-${NGINX_VERSION}

    make $j || sh -c "${WORK_HOME}/${BASE_NAME} clean && exit 1"

    if [ $? -ne 0 ]; then
        echo -e "\033[31m[ERROR] Compile encountered with an error.\033[0m"
        exit 1
    fi

    echo "Finished."
}

func_install() {
    if [ ! -x "${WORK_HOME}/src/nginx-${NGINX_VERSION}/objs/nginx" ]; then
        func_build
    fi

    if [ -d ${NGINX_INSTALL_PATH} ]; then
        rm -rf ${NGINX_INSTALL_PATH}
    fi

    echo "Start installing nginx..."

    cd ${WORK_HOME}/src/nginx-${NGINX_VERSION}

    mkdir -p ${NGINX_INSTALL_PATH}/sbin

    if [ $? -ne 0 ]; then
        echo -e "\033[31m[ERROR] Installation encountered with an error.\033[0m"
        exit 1
    fi

    cp ${WORK_HOME}/src/nginx-${NGINX_VERSION}/objs/nginx ${NGINX_INSTALL_PATH}/sbin

    cp -r ${WORK_HOME}/src/nginx-${NGINX_VERSION}/conf ${NGINX_INSTALL_PATH}
    cp -r ${WORK_HOME}/src/nginx-${NGINX_VERSION}/html ${NGINX_INSTALL_PATH}

    cd ${NGINX_INSTALL_PATH}/conf

    cp fastcgi.conf fastcgi.conf.default
    cp fastcgi_params fastcgi_params.default
    cp koi-utf koi-utf.default
    cp koi-win koi-win.default
    cp mime.types mime.types.default
    cp nginx.conf nginx.conf.default
    cp scgi_params scgi_params.default
    cp uwsgi_params uwsgi_params.default
    cp win-utf win-utf.default

    cp -r ${WORK_HOME}/conf ${NGINX_INSTALL_PATH}

    if [ ${ENABLE_MODSEC:-NO} = YES ]; then
        if [ ! -d "${NGINX_INSTALL_PATH}/conf/modules" ]; then
            mkdir -p ${NGINX_INSTALL_PATH}/conf/modules
        fi

        if [ ! -d "${NGINX_INSTALL_PATH}/conf/examples/modsec" ]; then
            mkdir -p ${NGINX_INSTALL_PATH}/conf/examples/modsec
        fi

        cp ${WORK_HOME}/src/nginx-${NGINX_VERSION}/objs/ngx_http_modsecurity_module.so ${NGINX_INSTALL_PATH}/conf/modules
        cp ${WORK_HOME}/src/ModSecurity/modsecurity.conf-recommended ${NGINX_INSTALL_PATH}/conf/examples/modsec/modsecurity.conf
        cp ${WORK_HOME}/src/ModSecurity/unicode.mapping ${NGINX_INSTALL_PATH}/conf/examples/modsec
    fi

    echo "Finished."
}

func_clean() {
    if [ -f ${NGINX_INSTALL_PATH}/cache/nginx.pid ]; then
        stop
    fi

    echo "Start cleaning nginx..."

    if [ -d "${WORK_HOME}/src/nginx-${NGINX_VERSION}" ]; then
        rm -rf "${WORK_HOME}/src/nginx-${NGINX_VERSION}"
    fi

    if [ -d "${WORK_HOME}/src/nginx-upstream-fair-master" ]; then
        rm -rf "${WORK_HOME}/src/nginx-upstream-fair-master"
    fi

    if [ -d ${WORK_HOME}/src/ModSecurity/src/.libs ]; then
        cd ${WORK_HOME}/src/ModSecurity
        make clean
    fi

    echo "Finished."
}

docker_env() {
    echo "Start initializing docker env..."

    docker ps -a | grep build_nginx_on_${IMAGE_NAME/:/_} > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        # 容器未创建
        # 创建容器
        docker run --name build_nginx_on_${IMAGE_NAME/:/_} \
            --volume=${WORK_HOME}:/data \
            --cpu-shares=256 --memory=2048m --memory-swap=0 \
            --oom-kill-disable \
            -t -i -d ${IMAGE_NAME} || exit 1
    else
        docker ps | grep build_nginx_on_${IMAGE_NAME/:/_} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            docker start build_nginx_on_${IMAGE_NAME/:/_} || exit 1
        fi
    fi

    docker exec -it build_nginx_on_${IMAGE_NAME/:/_} apk add bash
    docker exec -it build_nginx_on_${IMAGE_NAME/:/_} /data/builder sources ${IMAGE_NAME}
    docker exec -it build_nginx_on_${IMAGE_NAME/:/_} apk upgrade

    echo "Finished."
}

add_apk_source() {
    if [ ! -f .add_apk_source ]; then
        echo http://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories
        echo "apk" > .add_apk_source
    fi
}

function func_help() {
    echo "
Usage:
    ${BASE_NAME} [Command]

Commands:
    image       - Build a docker image
    build       - Compile source code
    help        - Show this information
"
}

function func_build_docker_images() {
    echo "Start building docker image..."
    # 修改 Dockerfile 中的 nginx 版本
    sed -i "s|FROM alpine:.*|FROM ${IMAGE_NAME}|g" ${WORK_HOME}/Dockerfile
    sed -i "s|ARG NGINX_VERSION=.*|ARG NGINX_VERSION=${NGINX_VERSION}|g" ${WORK_HOME}/Dockerfile
    sed -i "s|ARG ENABLE_MODSEC=.*|ARG ENABLE_MODSEC=${ENABLE_MODSEC}|g" ${WORK_HOME}/Dockerfile
    # 创建 nginx 镜像
    if [ ${ENABLE_MODSEC:-NO} = YES ]; then
        sed -i "s|# COPY dist/modsecurity/ /usr|COPY dist/modsecurity/ /usr|g" ${WORK_HOME}/Dockerfile
        docker build -t skygangsta/nginx-waf:${NGINX_VERSION}-alpine $WORK_HOME
    else
        sed -i "s|COPY dist/modsecurity/ /usr|# COPY dist/modsecurity/ /usr|g" ${WORK_HOME}/Dockerfile
        docker build -t skygangsta/nginx:${NGINX_VERSION}-alpine $WORK_HOME
    fi
    
    echo "Finished."
}

function func_chown() {
    chown -R $1:$2 ${WORK_HOME}
}

case "$1" in
    image)
        # 创建 redis docker 构建容器
        docker_env

        if [ "${2:-default}" != "nb" ]; then
            docker exec -it build_nginx_on_${IMAGE_NAME/:/_} /data/builder build || exit 1
        fi

        docker exec -it build_nginx_on_${IMAGE_NAME/:/_} /data/builder clean || exit 1
        docker exec -it build_nginx_on_${IMAGE_NAME/:/_} /data/builder chown $(id -u) $(id -g) || exit 1
        
        func_build_docker_images

        exit 0
    ;;
    build)
        func_install

        exit 0
    ;;
    sources)
        add_apk_source $@

        exit 0
    ;;
    clean)
        func_clean
    ;;
    chown)
        func_chown $2 $3
    ;;
    help)
        func_help
    ;;
    *)
        func_help
        exit 1
    ;;
esac
