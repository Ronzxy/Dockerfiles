#!/bin/bash
#
# 作者：Skygangsta<skygangsta@hotmail.com>
#
# Nginx 编译脚本，仅支持 Debian 系 Linux 系统

WORK_HOME=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
BASE_NAME=$(basename $BASH_SOURCE)

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

NGINX_VERSION=1.16.1
NGINX_VERSION_MAJOR=`printf $NGINX_VERSION | awk -F '.' '{print $1}'`
NGINX_VERSION_MINOR=`printf $NGINX_VERSION | awk -F '.' '{print $2}'`
BUILD_PREFIX=/usr
INSTALL_PREFIX=${WORK_HOME}/dist/nginx-${NGINX_VERSION}
STICKY_VERSION=1.2.6
IMAGE_NAME=alpine:edge

# 探测cpu核心数
if [ -f /proc/cpuinfo ]; then
    j="-j$(grep 'model name' /proc/cpuinfo | wc -l || 1)"
fi

check_source_file() {
    
    # # 检查并安装 wget
    # if ! which wget 2>1 > /dev/null; then
    #     apk add wget ca-certificates
    # fi

    if [ ! -d "${WORK_HOME}/src" ]; then
        mkdir -p "${WORK_HOME}/src"
    fi

    if [ ! -s "${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz" ]; then

        wget -c http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \
            -O ${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz
        if [ $? -ne 0 ]; then
            rm -rf ${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz
            exit $?
        fi
    fi

    if [ ! -s "${WORK_HOME}/src/nginx-upstream-fair-master.tar.gz" ]; then
        wget https://github.com/gnosek/nginx-upstream-fair/archive/master.tar.gz -O ${WORK_HOME}/src/nginx-upstream-fair-master.tar.gz

        if [ $? -ne 0 ]; then
            rm -rf ${WORK_HOME}/src/nginx-upstream-fair-master.tar.gz
            exit $?
        fi
    fi

    apk add git
    if [ ! -d "${WORK_HOME}/src/nginx-sticky-module-ng-${STICKY_VERSION}" ]; then
        git clone https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/src/${STICKY_VERSION}/ ${WORK_HOME}/src/nginx-sticky-module-ng-${STICKY_VERSION}
    # else
    #     cd ${WORK_HOME}/src/nginx-sticky-module-ng-${STICKY_VERSION}
    #     git pull origin master
    fi

}

check_build_tools() {
    # 安装编译工具
    apk add gcc g++ make autoconf patch
}

check_install_deps() {
    # 安装依赖
    apk add pcre-dev zlib-dev openssl-dev openssl-dev linux-headers
}

configure() {
    if [ -f "${WORK_HOME}/src/nginx-${NGINX_VERSION}/Makefile" ]; then
        clean
    fi

    check_source_file
    check_build_tools
    check_install_deps

    echo "Start configuring nginx..."

    tar xf ${WORK_HOME}/src/nginx-upstream-fair-master.tar.gz -C ${WORK_HOME}/src

    sed -i 's/default_port/no_port/g' ${WORK_HOME}/src/nginx-upstream-fair-master/ngx_http_upstream_fair_module.c

    tar xf ${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz -C ${WORK_HOME}/src && \
        cd ${WORK_HOME}/src/nginx-${NGINX_VERSION}

    ./configure --prefix=$BUILD_PREFIX \
    --sbin-path=$BUILD_PREFIX/sbin/nginx \
    --conf-path=/etc/nginx/nginx.conf \
    --error-log-path=/var/log/nginx/error.log \
    --http-log-path=/var/log/nginx/access.log \
    --pid-path=/var/run/nginx.pid \
    --lock-path=/var/lock/nginx.lock \
    --http-client-body-temp-path=/var/cache/nginx/client_temp \
    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
    --user=www --group=www \
    --with-http_ssl_module \
    --with-http_realip_module \
    --with-http_addition_module \
    --with-http_sub_module \
    --with-http_dav_module \
    --with-http_flv_module \
    --with-http_mp4_module \
    --with-http_gzip_static_module \
    --with-http_random_index_module \
    --with-http_secure_link_module \
    --with-http_stub_status_module \
    --with-http_v2_module \
    --with-mail \
    --with-mail_ssl_module \
    --with-file-aio \
    --with-cpp_test_module \
    --with-debug \
    --with-threads \
    --with-stream \
    --with-cc-opt='-O2 -g -m64 -mtune=generic' \
    --add-module=${WORK_HOME}/src/nginx-sticky-module-ng-${STICKY_VERSION} || bash -c "${WORK_HOME}/${BASE_NAME} clean && exit 1"

    echo "Finished."
}

build() {
    if [ ! -f "${WORK_HOME}/src/nginx-${NGINX_VERSION}/Makefile" ]; then
        configure
    fi

    echo "Start building nginx..."

    cd ${WORK_HOME}/src/nginx-${NGINX_VERSION}

    make $j || sh -c "${WORK_HOME}/${BASE_NAME} clean && exit 1"

    if [ $? -ne 0 ]; then
        echo -e "\033[31m[ERROR] Compile encountered with an error.\033[0m"
        exit 1
    fi

    echo "Finished."
}

install() {
    if [ ! -x "${WORK_HOME}/src/nginx-${NGINX_VERSION}/objs/nginx" ]; then
        build
    fi

    if [ -d ${INSTALL_PREFIX} ]; then
        rm -rf ${INSTALL_PREFIX}
    fi

    echo "Start installing nginx..."

    cd ${WORK_HOME}/src/nginx-${NGINX_VERSION}

    mkdir -p ${INSTALL_PREFIX}/sbin

    if [ $? -ne 0 ]; then
        echo -e "\033[31m[ERROR] Installation encountered with an error.\033[0m"
        exit 1
    fi

    cp objs/nginx ${INSTALL_PREFIX}/sbin
    cp -r conf html ${INSTALL_PREFIX}

    cd ${INSTALL_PREFIX}/conf

    cp fastcgi.conf fastcgi.conf.default
    cp fastcgi_params fastcgi_params.default
    cp koi-utf koi-utf.default
    cp koi-win koi-win.default
    cp mime.types mime.types.default
    cp nginx.conf nginx.conf.default
    cp scgi_params scgi_params.default
    cp uwsgi_params uwsgi_params.default
    cp win-utf win-utf.default

    cp -r ${WORK_HOME}/conf ${INSTALL_PREFIX}

    echo "Finished."
}

clean() {
    if [ -f ${INSTALL_PREFIX}/cache/nginx.pid ]; then
        stop
    fi

    echo "Start cleaning nginx..."

    if [ -d "${WORK_HOME}/src/nginx-${NGINX_VERSION}" ]; then
        rm -rf "${WORK_HOME}/src/nginx-${NGINX_VERSION}"
    fi

    if [ -d "${WORK_HOME}/src/nginx-upstream-fair-master" ]; then
        rm -rf "${WORK_HOME}/src/nginx-upstream-fair-master"
    fi

    echo "Finished."
}

docker_env() {
    echo "Start initializing docker env..."

    docker ps -a | grep build_nginx_on_${IMAGE_NAME/:/_} > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        # 容器未创建
        # 创建容器
        docker run --name build_nginx_on_${IMAGE_NAME/:/_} \
            --volume=${WORK_HOME}:/data \
            --cpu-shares=1024 --memory=512m --memory-swap=-1 \
            --oom-kill-disable \
            -t -i -d ${IMAGE_NAME} || exit 1
    else
        docker ps | grep build_nginx_on_${IMAGE_NAME/:/_} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            docker start build_nginx_on_${IMAGE_NAME/:/_} || exit 1
        fi
    fi

    docker exec -it build_nginx_on_${IMAGE_NAME/:/_} apk add bash
    docker exec -it build_nginx_on_${IMAGE_NAME/:/_} /data/builder sources ${IMAGE_NAME}
    docker exec -it build_nginx_on_${IMAGE_NAME/:/_} apk upgrade

    echo "Finished."
}

add_apk_source() {
    if [ ! -f .add_apk_source ]; then
        echo http://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories
        echo "apk" > .add_apk_source
    fi
}

function func_help() {
    echo "
Usage:
    ${BASE_NAME} [Command]

Commands:
    image       - Build a docker image
    build       - Compile source code
    help        - Show this information
"
}

function func_build_docker_images() {
   echo "Start building docker image..."
    # 修改 Dockerfile 中的 nginx 版本
    sed -i "s|FROM alpine:.*|FROM ${IMAGE_NAME}|g" ${WORK_HOME}/Dockerfile
    sed -i "s|COPY startup.sh dist/nginx-.*|COPY startup.sh dist/nginx-${NGINX_VERSION}/ ./|g" ${WORK_HOME}/Dockerfile
    # 创建 nginx 镜像
    docker build -t skygangsta/nginx:$NGINX_VERSION-alpine $WORK_HOME
    
    echo "Finished."
}

function func_chown() {
    chown -R $1:$2 ${WORK_HOME}
}

case "$1" in
    image)
        # 创建 redis docker 构建容器
        docker_env

        if [ "${2:-default}" != "nb" ]; then
            docker exec -it build_nginx_on_${IMAGE_NAME/:/_} /data/builder build || exit 1
        fi

        docker exec -it build_nginx_on_${IMAGE_NAME/:/_} /data/builder clean || exit 1
        docker exec -it build_nginx_on_${IMAGE_NAME/:/_} /data/builder chown $(id -u) $(id -g) || exit 1
        
        func_build_docker_images

        exit 0
    ;;
    build)
        install

        exit 0
    ;;
    sources)
        add_apk_source $@

        exit 0
    ;;
    clean)
        clean
    ;;
    chown)
        func_chown $2 $3
    ;;
    help)
        func_help
    ;;
    *)
        func_help
        exit 1
    ;;
esac
